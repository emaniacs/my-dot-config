" merge from https://github.com/amix/vimrc

" vim-plug {{{
call plug#begin('~/.vim/bundle')

" Plug 'tpope/vim-sensible'
Plug 'lfv89/vim-interestingwords'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-eunuch'
" Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-abolish'
" Plug 'ludovicchabant/vim-gutentags'
" Plug 'skywind3000/gutentags_plus'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'itchyny/vim-cursorword'
Plug 'rhysd/clever-f.vim'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
Plug 'vim-vdebug/vdebug'
Plug 'airblade/vim-gitgutter'

Plug 'preservim/tagbar'

" Plug 'sheerun/vim-polyglot'
" Plug 'lambdatoast/elm.vim'
Plug 'ElmCast/elm-vim'
Plug 'dense-analysis/ale'
Plug 'junegunn/vim-easy-align'
" Plug 'ervandew/supertab'
" Plug 'StanAngeloff/php.vim'
Plug 'https://github.com/alok/notational-fzf-vim'
" Plug 'Vimjas/vim-python-pep8-indent'
Plug 'diepm/vim-rest-console'
Plug 'trevordmiller/nova-vim'

" Plug 'itchyny/lightline.vim'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'rizzatti/dash.vim'
" Plug 'skywind3000/vim-preview'

call plug#end()
" }}}
"

"Ale {{{
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_sign_warning = 'ǃ'
let g:ale_sign_error = '×'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_fixers = {
            \ 'python': ['autopep8'],
            \ 'javascript': ['prettier'],
            \ 'go': ['gofmt'],
            \ 'elm': ['elm-format'],
            \ 'json': ['prettier'],
            \}
let g:ale_linters = {
            \ 'python': ['pylint'],
            \ 'go': ['gofmt', 'golint', 'go build'],
            \ 'javascript': ['eslint'],
            \ 'elm': ['elm-make'],
            \ 'erlang': ['erlc'],
            \ 'rust': ['rustc'],
            \}
let g:ale_virtualenv_dir_names = ['.virtualenv', '.virtualenvosx', 'virtualenv']
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
" jump to error
nmap [e <Plug>(ale_previous_wrap)
nmap ]e <Plug>(ale_next_wrap)
"}}}
"
"
let g:nv_search_paths = ['~/Notes', '~/.notes', '~/.todo/']



" Format multi-line comments, Fold
set comments=sr:/*,mb:*,ex:*/
set formatoptions+=r
set foldmethod=marker
set foldmarker={,}
" set foldlevelstart=10
" fix error on backspace
set backspace=eol,indent,start
set list
set listchars=tab:»·,trail:·,extends:>
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" show match tag
set showmatch
set hidden

set ignorecase
set smartcase
set incsearch

set relativenumber

" sometimes syntax highlight didnt work
set redrawtime=10000

" no swap file
set noswapfile


colorscheme nova

" {{{ Function

function! JumpToLists()
    jumps
    let j = input("Select list number: ")
    if j != ''
        let pattern = '\v\c^\+'
        if j =~ pattern
            let j = substitute(j, pattern, '', 'g')
            execute "normal " . j . "\<c-i>"
        else
            execute "normal " . j . "\<c-o>"
        endif
     endif
endfunction

function! JumpToChanges()
    changes
    let j = input("Select changes number: ")
    if j != ''
        let pattern = '\v\c^\+'
        if j =~ pattern
            let j = substitute(j, pattern, '', 'g')
            execute "normal " . j . "\<c-i>"
        else
            execute "normal " . j . "\<c-o>"
        endif
     endif
endfunction
" }}}


let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

nmap <silent> <leader>A :Ag "<cword>"<cr>
nmap <silent> <leader>a :Ag "<cword>"<cr>

nmap <leader>w :w!<cr>
map <leader>d :bdelete<cr>
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>m :b#<cr>
map <leader>l :ls<cr>
map <leader>q ZZ
map <leader>, <c-w>w
map <leader>gn :GitGutterNextHunk<cr>
map <leader>gp :GitGutterPrevHunk<cr>
map <leader>gs :Git status<cr>
map <leader>gc :Git commit -m '
map <leader>G :Git<cr>

" change directory into current directory file
nmap <leader>C :lcd "%:p:h"<cr>


" open file tree at current directory
" this shorcut take from youtube
" https://www.youtube.com/watch?v=E-ZbrtoSuzw
map <leader>W :30vs .<cr>

" window size management
map <C-S-Left> :winc <<cr>
map <C-S-Right> :winc ><cr>
map <C-S-Up> :winc +<cr>
map <C-S-Down> :winc -<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" disable auto generate tags, this handle by gutentags
let g:fzf_generate_tags = 0
" Empty value to disable preview window altogether
let g:fzf_preview_window = ''

" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'

noremap <leader>jf :Files<cr>
noremap <leader>jb :Buffers<cr>
noremap <leader>jh :History<cr>



noremap <leader>gl :call JumpToLists()<cr>
noremap <leader>gc :call JumpToChanges()<cr>

noremap <leader>] <C-]>
nnoremap ; :

nmap <leader>. :tabnext<cr>
nmap <leader>/ :tabprevious<cr>

"" Gitgutter
let g:gitgutter_enabled = 0
noremap <leader>gg :GitGutterToggle<cr>

" gutentags --------------------------
" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.root', '.git', '.svn', '.hg', '.project']

" generate datebases in my cache directory, prevent gtags files polluting my project
let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

" {{{ Ultisnip
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
" }}}

function! PHPDocs(query)
    let dir = '/Users/ardi/Documents/git/vim-php-manual/manual/doc'
    let query = substitute(a:query, "_", " ", "g")
    call fzf#vim#files(dir, fzf#vim#with_preview({'options': ['--query='. query ]}))
endfunction
nmap <leader>P :call PHPDocs(expand("<cword>"))<cr>

nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

function CurrentGitStatus()
    let gitoutput = split(system('git status --porcelain -b '.shellescape(expand('%')).' 2>/dev/null'),'\n')
    if len(gitoutput) > 0
        let b:gitstatus = strpart(get(gitoutput,0,''),3) . '/' . strpart(get(gitoutput,1,'  '),0,2)
    else
        let b:gitstatus = ''
    endif
endfunc

aut BufNewFile,BufRead *.elm setlocal foldmethod=indent
aut BufNewFile,BufRead *.py setlocal foldmethod=indent

set laststatus=2
set statusline=%f\ %h%m%r " file + modified flag
set statusline+=[%{fugitive#head()}] " git branch
set statusline+=%=[%{strlen(&fenc)?&fenc:&enc}\ %l:%v-%L] " encoding line:column-total
let g:netrw_keepdir=0


let g:ale_php_phpstan_level = 0
" let g:airline#extensions#tagbar#flags = 'f'
" let g:lightline = {
"             \ 'colorscheme': 'wombat',
"             \ 'active': {
"             \   'left': [ [ 'mode', 'paste' ],
"             \             [ 'fugitive', 'filename' ],
"             \             ['ctrlpmark', 'tagbar']
"             \           ]
"             \ },
"             \ 'component': {
"             \   'tagbar':'%{tagbar#currenttag("[%s]", "", "f")}',
"             \ },
"             \ }
" \   'tagbar': '%{tagbar#currenttag("[%s]", "", "f")}',

" vim:foldmethod=marker
"
