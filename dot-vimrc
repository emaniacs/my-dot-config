" merge from https://github.com/amix/vimrc

" vim-plug {{{
call plug#begin('~/.vim/bundle')
" Plug 'Shougo/vimproc'
Plug 'emaniacs/open_file_under_cursor.vim'
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'jlanzarotta/bufexplorer', {'on': 'BufExplorer'}
Plug 'junegunn/goyo.vim'
Plug 'kien/ctrlp.vim'
Plug 'kurkale6ka/vim-pairs'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomasr/molokai'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/YankRing.vim'
Plug 'vim-scripts/snipMate'
Plug 'whatyouhide/vim-gotham'
Plug 'xolox/vim-misc', {'on': 'Note'}
Plug 'xolox/vim-notes', {'on': 'Note'}
Plug 'rhysd/clever-f.vim'
Plug 'swekaj/php-foldexpr.vim', {'for': 'php'}
Plug 'sjl/gundo.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'Valloric/YouCompleteMe'
Plug 'pelodelfuego/vim-swoop'
Plug 'Wutzara/vim-materialtheme'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle'      }
Plug 'tommcdo/vim-exchange'

" Plug 'Valloric/YouCompleteMe'
call plug#end()
" }}}

" Tab indentions {{{
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set pastetoggle=<F9>
" }}}

" Misc SET{{{
set nocompatible
filetype off
set matchpairs+=<:>

set tags+=.tags

" Auto change dir
set noautochdir

set history=700
set hidden

" Enable line numbers
set number

" Auto indention
set autoindent
set cindent

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Format multi-line comments, Fold
set comments=sr:/*,mb:*,ex:*/
set formatoptions+=r
set foldmethod=marker
set foldmarker={,}
set foldlevelstart=10
" fix error on backspace
set backspace=eol,indent,start
set list
set listchars=tab:»·,trail:·,extends:>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" Use hard tabs for make files
autocmd FileType make setlocal noexpandtab

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
" Remember info about open buffers on close
set viminfo^=%

command W w !sudo tee % > /dev/null

au BufRead,BufNewFile *.php set ft=php.html
au BufRead,BufNewFile *.tpl set ft=php.html
au BufRead,BufNewFile *.tag set ft=html

au BufRead,BufNewFile *.md set ft=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80

au BufRead,BufNewFile *.jade setl tabstop=2
au BufRead,BufNewFile *.jade setl shiftwidth=2
au BufRead,BufNewFile *.jade setl softtabstop=2
au BufRead,BufNewFile *.jade setl expandtab

" backup and swap file
set backupdir=~/.vim/tmp/backup
set noswapfile

au FileType python setl foldmethod=indent
au FileType html setl foldmethod=indent

" }}}


" tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Gui, color {{{
" Syntax highlighting
syntax on

set guifont=Ubuntu\ Mono\ 11
set encoding=utf8
set ffs=unix,dos,mac

set lazyredraw

set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

set t_Co=256
if has("gui_running")
    set background=dark
    colorscheme molokai
    set guioptions-=T
    set guioptions-=e
else
    colorscheme molokai
endif

set cursorline
set laststatus=2
" }}}

" Session {{{
let g:session_autosave = 'yes'
let g:session_autoload = 'no'
" }}}

" bufExplorer {{{
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=1
let g:bufExplorerSortBy='name'
nmap <leader>o :BufExplorer<cr>
" }}}

" YankRing {{{
if has("win16") || has("win32")
    " Don't do anything
else
    let g:yankring_history_dir = '~/.vim/tmp/yank'
endif
" }}}

" vim-multiple-cursors {{{
let g:multi_cursor_next_key='<C-i>'
" }}}

" Goyo {{{
let g:goyo_width=70
let g:goyo_margin_top = 2
let g:goyo_margin_bottom = 2
nnoremap <silent> <leader>z :Goyo<cr>
" }}}

" Syntastic {{{
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_html_checkers=['']

" php checker
if executable('/opt/php55/bin/php')
    let g:syntastic_php_php_exec = '/opt/php57/bin/php'
end
" }}}

" Functions {{{
function! PhpHelp()
    let fname = expand("<cword>")
    if strlen(fname) == 0
        return
    endif
    let fullpath = $HOME."/git/PIV/doc/" . substitute(fname,"_", "-", "g") . ".txt"
    if filereadable(fullpath)
        call MiniOpen(fullpath)
    else
        echo "Help not exists. '".fullpath."'"
    endif
endfunction

function! MiniOpen(f, ...)
    if a:0 > 0 && a:1 == "t"
        let command = "belowright sview"
    else
        let command = "belowright split"
    endif

    execute command a:f
endfunction

function! GetCWD()
    let dir = getcwd()
    if len(dir) > 47 || winwidth(0) < 100
        let spdir = split(dir, '/')
        let target= []
        for name in spdir[0:-2]
            call add(target, name[0])
        endfor
        return '/'. join(target, '/') . '/' . spdir[-1]
    endif

    return dir
endfunction

function! MyModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
    let fname = expand('%:t')
    return fname != '' ? fname : '[No Name]'
endfunction

function! MyGitBranch()
    try
        if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
            let _ = fugitive#head()
            return strlen(_) ? _ : ''
        endif
    catch
    endtry
    return ''
endfunction

function! MyMode()
    let fname = expand('%:t')
    return fname == 'ControlP' ? 'CtrlP' :
                \ fname == '__cwd__' ? 'getcwd' :
                \ fname =~ 'NERD_tree' ? 'NERDTree' :
                \ lightline#mode() == 'NORMAL' ? 'N' :
                \ lightline#mode() == 'INSERT' ? 'I' :
                \ lightline#mode() == 'VISUAL' ? 'V' :
                \ lightline#mode() == 'V-LINE' ? 'V' :
                \ lightline#mode() == 'V-BLOCK' ? 'V' :
                \ lightline#mode() == 'REPLACE' ? 'R' :
                \ lightline#mode()
endfunction

" }}}

" ctrlp {{{
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " dont caching the result
    let g:ctrlp_use_caching=0
endif
set wildignore+=*.so,*.swp,*.bak,*.swp,*/.git/*,*/node_modules/*
let g:ctrlp_show_hidden = 1
" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"   \ 'file': '\v\.(exe|so|dll)$',
"   \ 'link': 'some_bad_symbolic_links',
"   \ }
" }}}

" lightline {{{
let g:lightline = {
            \ 'colorscheme' : 'wew',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'gitb'], ['ro', 'mdf'], ['workingdir','filename' ]],
            \   'right': [ 
            \            [ 'lineinfo', 'percent' ],
            \            [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'inactive': {
            \   'right': [ ['mdf'], ['percent']]
            \ },
            \ 'component_function': {
            \   'gitb': 'MyGitBranch',
            \   'filename': 'MyFilename',
            \   'workingdir': 'GetCWD',
            \   'mode': 'MyMode',
            \   'ro': 'MyReadonly',
            \   'mdf': 'MyModified',
            \ },
            \ 'component_expand': {
            \   'syntastic': 'SyntasticStatuslineFlag',
            \ },
            \ 'component_type': {
            \   'syntastic': 'error',
            \ },
            \ 'subseparator': { 'left': '|', 'right': '|' }
            \ }
" }}}

" Notes {{{
let g:notes_directories = ['~/Notes']
" }}}

"Ag {{{
nmap <silent> R :Ag "<cword>"<cr> 
"}}}

" clever-f {{{
let g:clever_f_across_no_line = 0
" }}}

" Another shortcut {{{
" Remap VIM 0 to first non-blank character
map 0 ^

nnoremap j gj
nnoremap k gk

" pagedown pageup
nmap K <PageUp>
nmap J <PageDown>

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <A-Left> :tabprevious<CR>
imap <A-Left> <ESC>:tabprevious<CR>
map <A-Right> :tabnext<CR>
imap <A-Right> <ESC>:tabnext<CR>

nmap <F8> :TagbarToggle<cr>
imap <F8> <ESC>:TagbarToggle<cr>

map <F10> :NERDTreeToggle<CR>
imap <F10> <ESC>:NERDTreeToggle<CR>
map <S-F10> :NERDTree %<CR>
imap <S-F10> <ESC>:TagbarToggle<CR>

imap <S-Up> <ESC>:winc +<cr><esc>i
map <S-Up> :winc +<cr>
imap <S-Down> <ESC>:winc -<cr><esc>i
map <S-Down> :winc -<cr>
imap <S-Right> <ESC>:winc ><cr><esc>i
map <S-Right> :winc ><cr>
imap <S-Left> <ESC>:winc <<cr><esc>i
map <S-Left> :winc <<cr>

map <T-Left> <C-w><Left>
map <T-Right> <C-w><Right>
map <T-Up> <C-w><Up>
map <T-Down> <C-w><Down>
map <T-q> <C-w>q

map <A-x> "+x
imap <A-x> <ESC>"+xi
map <A-v> "+gP
imap <A-v> <ESC>"+gPi
map <A-c> "+y
imap <A-c> <ESC>"+yi

inoremap <C-space> <esc>
nnoremap ; :
" nnoremap : ;
nnoremap \ ,
nnoremap R "_d

"}}}

" Leader shorcut {{{
let mapleader = ","
let g:mapleader = ","

nmap <leader>w :w!<cr>
map <leader>d :bdelete<cr>
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>m :b#<cr>
map <leader>l :ls<cr>
map <leader>b :call MiniOpen("~/buffer")<cr>
map <leader>h :call PhpHelp()<cr>
map <leader>q ZZ
map <leader>, <c-w>w
map <leader>gn :GitGutterNextHunk<cr>
map <leader>gp :GitGutterPrevHunk<cr>
map <leader>gd :Git diff %<cr>
map <leader>gs :Git status<cr>
map <leader>gc :Git commit -m '
map <leader>gb :Git blame %<cr>
map <leader>gA :Git add 
map <leader>ga :Git add %<cr>
map <leader>gr :Git reset HEAD %<cr>
map <leader>go :Git checkout %
map <leader>gl :Git log --pretty=format:"\%h\%x09\%an\%x09\%ad\%x09\%s" -20 <cr>
map <leader>gL :Git log --pretty=format:"\%h\%x09\%an\%x09\%ad\%x09\%s"

" center
nmap <space>j zz
nmap <space>k zz

" tab control
nmap <leader>. :tabnext<cr>
nmap <leader>/ :tabprevious<cr>

nmap <silent> <leader><cr> :set hlsearch!<cr>
nmap <leader>cd :lcd %:h<cr>
nmap <leader>cg :lcd <c-r>=system('git rev-parse --show-toplevel')<cr><cr>
nmap <leader>cc :!mkdir -p %:p:h<cr>

" http://www.reddit.com/r/vim/comments/2p6jqr/quick_replace_useful_refactoring_and_editing_tool/cmttvv2
nnoremap <leader>r :.,$s/\<<C-r>=expand('<cword>')<CR>\>//gc<Left><Left><Left>
nnoremap <leader>F :echo expand('%:p')<cr>

noremap <leader>j :CtrlP<cr>
noremap <A-b> :CtrlPBuffer<cr>
" map <leader>cc :CtrlPMixed<cr>
" map <leader>cb :CtrlPBuffer<cr>
" map <leader>ct :CtrlPTag<cr>


" }}}

" vim:foldmethod=marker:foldlevel=0
