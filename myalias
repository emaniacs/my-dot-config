__git_ps(){
    local worktree=$(git rev-parse --show-toplevel 2>/dev/null)
    if test ! -d "$worktree" ; then
        echo -e $(tput setaf 1)'no-git'$(tput setaf 9)
    else
        local branch=$(__git_branch)
        if test -e $branch; then
            branch="$(tput setaf 3)none$(tput setaf 9)"
        else
            branch="$(tput setaf 2)${branch}$(tput setaf 9)"
        fi  

        local status=$(__git_status)
        if test $status; then
            status=";$(tput setaf 5)${status}$(tput setaf 9)"
        fi  

        echo -e ' git:'${branch}${status}';'$(tput setaf 153)$worktree' '
    fi  
}
__git_branch() {
    git branch 2>/dev/null | grep \* | tr -d '* '
}
__git_status(){
    git status --porcelain | awk '{print $1}' | tr -d '\n' | tr -s '[a-zA-Z0-9?]'
}


# create dir and cd into dir
take() {
    dr=$1
    mkdir -p "$dr" && cd "$dr"
}

# for test
argS() {
    def="DEFAULT"
    echo ${1-$def}
}

# from kfirlavi.com
is_empty() {
    local var=$1
    [[ -z ${var} ]]
}

# alias for git
alias gitlp='git log --pretty=format:"%h%x09%an%x09%ad%x09%s" $*'
alias gits='git status'
alias gitc='git commit -m'
alias gitd='git diff'
alias gitac='git commit -am'
alias gito='git checkout'
alias gith='git log --all --graph --decorate --oneline --abbrev-commit'
alias gitb='git branch'
alias gpl='git pull'
alias gita='git add $*'

# other alias
alias d='dmesg|tail'
alias fl='fdisk -l'
alias nx='sudo /home/ardi/bin/nginx153/sbin/nginx'
alias sp='sudo supervisorctl'
alias enw='emacs --no-window'

#sshfs -o follow_symlinks -o workaround=rename wew@192.168.9.129:/opt/lampp/htdocs/ /home/ardi/sshfs/wew@wahyu'

ltunnel() {
    port=3000
    sudo ssh -L 80:localhost:${1-$port} $(whoami)@localhost
}

dimount () {
    local config_file=$HOME/.dimount
    local host=''
    local mount_point=''
    local name=${1-""}
    local act=${2-mount}

    # read config file
    if [ -f ${config_file} ] ; then
        while read line ; do
            tmp=(${line/ / })
            if [ ${#tmp[@]} -eq 3 ] ; then
                if [ ${name} == ${tmp[0]} ]; then
                    host=${tmp[1]}
                    mount_point=${tmp[2]}
                    break
                fi
            fi
        done <${config_file}
    else
        echo "No config file ${config_file}"
        return
    fi

    if [ -z "${host}" -o -z "${mount_point}" ] ; then
        echo "Empty host or mount point [${name} -> ${host}:${mount_point}]"
        return
    fi

    case "${act}" in
        umount|u)
            echo "Unmounting '${mount_point}' from '${host}' "
            sudo umount -f ${mount_point}
            pid=$(ps aux|grep ${host}|head -1|awk '{print $2}')
            # pid=$(pgrep -f sshfs)
            if test -n ${pid} ; then
                sudo kill -9 "${pid}"
            fi
            ;;
        remount|r)
            dimount ${name} umount
            dimount ${name} mount
            ;;
        mount|m)
            echo "Mounting '${host}' into '${mount_point}'"
            sshfs -o follow_symlinks -o workaround=rename "${host}" "${mount_point}"
            ;;
        *)
            echo "
    config file is ${config_file}
    dimount name <option>
    option:
        mount | m : mount filesystem
        remount | r : mount filesystem
        umount | u : mount filesystem
"
            ;;
    esac
}


generate_ctags() {
    local the_path=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -z ${the_path} ] ; then
        the_path=$(pwd)
    fi

    ctags -R -f .tags ${the_path}
}

# export GOROOT=$HOME/go/go
# export GOPATH=$HOME/go/me
# export PATH=$PATH:$GOROOT/bin
# export PATH=$PATH:$HOME/bin/go_appengine
# export PATH=$PATH:$GOPATH/bin

# vim:ft=sh
